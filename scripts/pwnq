#!/usr/bin/env python
'''
Submit a bunch of jobs to the PBS queue(s)
'''
import sys, os, re
import time
import subprocess
from collections import defaultdict
from argparse import ArgumentParser
from hpcutils import qdata

QUEUES = [{'name': 'certainty-a.local',
          'capacity': 8},
          {'name': 'certainty-b.local',
          'capacity': 8},
          {'name': 'certainty-c.local',
          'capacity': 8},
          {'name': 'certainty-d.local',
          'capacity': 8}]

def check():
    '''Check each of queues for how many jobs you can currently submit to them'''
    myjobids = [int(job['JOB_ID']) for job in qdata.Qdata().by_user(USER)]
    remaining_q_spots = {}
    for v in QUEUES:
        remaining_q_spots[v['name']] = v['capacity']
        
    for i, myjobid in enumerate(myjobids):
        output = subprocess.check_output('qstat -f -e %s' % myjobid, shell=True)

        q = re.search('Job_Owner\s=\s%s@(.+)' % USER, output).group(1)
        if not q in [Q['name'] for Q in QUEUES]:
            raise Exception('Unrecognized queue')
        remaining_q_spots[q] -= 1


    return remaining_q_spots

def submit(qname_to_number):
    '''Submit files'''
    try:
        for qname, number in qname_to_number.iteritems():
            for i in range(number):
                f = FILES.pop()
                cmd = 'ssh %s touch %s.touch' % (qname, f)
                subprocess.check_output(cmd, shell=True)
                print 'Submitting %s' % f
    except IndexError:
        return False

    if len(FILES) == 0:
        return False
    return True

          
parser = ArgumentParser(description='Pwn the Q')
parser.add_argument('files', type=str, nargs='+',
                    help='pbs shell scripts to submit')
parser.add_argument('--sleep_time', metavar='-s', type=int,
                    help='Time to sleep between submission attempts, in minutes. Default = 60',
                    default=60)

args = parser.parse_args()
for f in args.files:
    if not os.path.isfile(f):
        print >> sys.stderr, 'Error: %s: file "%s" does not exist.' % (os.path.basename(sys.argv[0]), f)
        sys.exit(1)

# your user name
USER = os.environ['USER']

FILES = [os.path.abspath(file) for file in args.files]
# reverse files so that when we pop, we get them in the right order
FILES = FILES[::-1]

sleep_time = args.sleep_time * 60 # convert to seconds

keep_going = True
while keep_going:
    name_to_number = check()
    keep_going = submit(name_to_number)
    if keep_going:
        time.sleep(sleep_time)

